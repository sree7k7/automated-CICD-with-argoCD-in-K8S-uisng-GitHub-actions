name: ci
on:
  push:
    branches:
      - '*'
    tags:
      - "v*.*.*"
  pull_request:
    branches:
      - 'main'
      - '**'
permissions: write-all
        # actions: write
        # checks: write
        # contents: write
        # deployments: write
        # id-token: write
        # issues: write
        # discussions: write
        # packages: write
        # pages: write
        # pull-requests: write
        # repository-projects: write
        # security-events: write
        # statuses: write
env:
    image_name: next-app
    github_repo: automated-CICD-with-argoCD-in-K8S-uisng-GitHub-actions
    deploy_path: /k8s-deploy/deployment.yaml 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Checkout
        uses: actions/checkout@v3
      - # -------- tag the image -----
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
            # list of Docker images to use as base name for tags
          images: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.image_name }}
          # generate Docker tags based on the following events/attributes
          tags: |
            type=schedule
            # type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # type=raw,value=sha
            type=sha
      ## -- update script for deploy
      # - 
      #   name: Run build scriptxx
      #   run: ./.github/workflows/build.sh
      #   shell: bash
      - # --- script to push the image tag in configuration code ----
        name: Custom script
        run: |

         #!/bin/bash
         git config user.email ${{ secrets.USER_EMAIL }}
         git config user.name ${{ secrets.GIT_USERID }}
         git clone https://${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.GIT_REPO_K8S_CONFIG_CODE }}@github.com/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.github_repo }}.git
         git pull
         ls
         cd ${{ env.github_repo }}
         echo "cd to${{ env.github_repo }}"
         ls
         cat .${{ env.deploy_path }}
         sed -i 's+${{ secrets.DOCKERHUB_USERNAME }}/*.*+${{ steps.meta.outputs.tags }}+g' .${{ env.deploy_path }}
         cat .${{ env.deploy_path }}
         echo "cat done!"
         git config user.email ${{ secrets.USER_EMAIL }}
         git config user.name ${{ secrets.GIT_USERID }}
         echo "git logged in"
         git add .
         git commit -m "version - ${{ steps.meta.outputs.tags }}"
         git push https://${{ secrets.GIT_USERID }}:${{ secrets.GIT_REPO_K8S_CONFIG_CODE }}@github.com/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.github_repo }}.git
         
         echo "pushed code ${{ steps.meta.outputs.tags }}"
        shell: bash
      ## --- yo! login --
      -
        name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      ## ---- create and boot a builder
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      ## --- docker image testing ---
      -
        name: Build and export to Docker
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.image_name }}
      # -
      #   name: Test
      #   run: |
      #     docker run -d --rm ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.image_name }}
      #     docker run ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.image_name }} echo "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.image_name }} -> tested ok!"

      -
        name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: ./Dockerfile
          push: true
          # push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
